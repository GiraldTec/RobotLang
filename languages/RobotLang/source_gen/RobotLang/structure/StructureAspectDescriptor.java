package RobotLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptDirection = createDescriptorForDirection();
  /*package*/ final ConceptDescriptor myConceptMove = createDescriptorForMove();
  /*package*/ final ConceptDescriptor myConceptRoom = createDescriptorForRoom();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptDirection.getId(), 0);
    myIndexMap.put(myConceptMove.getId(), 1);
    myIndexMap.put(myConceptRoom.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptDirection, myConceptMove, myConceptRoom);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptDirection;
      case 1:
        return myConceptMove;
      case 2:
        return myConceptRoom;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForDirection() {
    return new ConceptDescriptorBuilder("RobotLang.structure.Direction", MetaIdFactory.conceptId(0xe18f85ddf5fe45a9L, 0x8640356892e9137eL, 0x765d4e762af80181L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).alias("direction", "").sourceNode(new SNodePointer("r:166009be-9e66-45ad-a020-4c62d849af80(RobotLang.structure)", "8529059538743591297")).create();
  }
  private static ConceptDescriptor createDescriptorForMove() {
    return new ConceptDescriptorBuilder("RobotLang.structure.Move", MetaIdFactory.conceptId(0xe18f85ddf5fe45a9L, 0x8640356892e9137eL, 0x765d4e762af80148L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x765d4e762af8017fL, "distance", new SNodePointer("r:166009be-9e66-45ad-a020-4c62d849af80(RobotLang.structure)", "8529059538743591295"))).properties("distance").alias("move", "").sourceNode(new SNodePointer("r:166009be-9e66-45ad-a020-4c62d849af80(RobotLang.structure)", "8529059538743591240")).create();
  }
  private static ConceptDescriptor createDescriptorForRoom() {
    return new ConceptDescriptorBuilder("RobotLang.structure.Room", MetaIdFactory.conceptId(0xe18f85ddf5fe45a9L, 0x8640356892e9137eL, 0x765d4e762aef6ac7L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.execution.util.structure.IMainClass").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L), MetaIdFactory.conceptId(0x4caf0310491e41f5L, 0x8a9b2006b3a94898L, 0x40c1a7cb987d20d5L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x765d4e762aef6adaL, "height", new SNodePointer("r:166009be-9e66-45ad-a020-4c62d849af80(RobotLang.structure)", "8529059538743028442")), new ConceptDescriptorBuilder.Prop(0x765d4e762aef6adcL, "width", new SNodePointer("r:166009be-9e66-45ad-a020-4c62d849af80(RobotLang.structure)", "8529059538743028444"))).properties("height", "width").rootable().alias("room", "").sourceNode(new SNodePointer("r:166009be-9e66-45ad-a020-4c62d849af80(RobotLang.structure)", "8529059538743028423")).create();
  }
}
